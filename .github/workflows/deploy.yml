# DO NOT TOUCH THIS FILE
# Please speak to SudoVanilla (Korbs) if you have any issues.
# For Security check please contact Eveeifyeve Instead of sudovanilla.

name: Deploy Website

on:
  push:
    branches: [ "main" ]

  workflow_dispatch:

jobs:



# Security Check 
  # codacy-security-scan:
  #   permissions:
  #     contents: read # for actions/checkout to fetch code
  #     security-events: write # for github/codeql-action/upload-sarif to upload SARIF results
  #     actions: read # only required for a private repository by github/codeql-action/upload-sarif to get the Action run status
  #   name: Codacy Security Scan
  #   runs-on: ubuntu-latest
  #   steps:
  #     # Checkout the repository to the GitHub Actions runner
  #     - name: Checkout code
  #       uses: actions/checkout@v3

  #     # Execute Codacy Analysis CLI and generate a SARIF output with the security issues identified during the analysis
  #     - name: Run Codacy Analysis CLI
  #       uses: codacy/codacy-analysis-cli-action@d840f886c4bd4edc059706d09c6a1586111c540b
  #       with:
  #         # Check https://github.com/codacy/codacy-analysis-cli#project-token to get your project token from your Codacy repository
  #         # You can also omit the token and run the tools that support default configurations
  #         project-token: ${{ secrets.CODACY_PROJECT_TOKEN }}
  #         verbose: true
  #         output: results.sarif
  #         format: sarif
  #         # Adjust severity of non-security issues
  #         gh-code-scanning-compat: true
  #         # Force 0 exit code to allow SARIF file generation
  #         # This will handover control about PR rejection to the GitHub side
  #         max-allowed-issues: 2147483647

  #     # Upload the SARIF file generated in the previous step
  #     - name: Upload SARIF results file
  #       uses: github/codeql-action/upload-sarif@v2
  #       with:
  #         sarif_file: results.sarif


          # -----------------------------------------------




# Checks the linting of the website 
  linting: 
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2
      
      - name: Setup Bun
        uses: oven-sh/setup-bun@v1

      - name: Install dependencies
        run: bun install

      - name: Run Stylelint
        run: bun run lint:css


#Screenshot of website

  screenshot:
    runs-on: ubuntu-latest
    needs: [linting]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
         ssh-key: ${{ secrets.SSH_PRIVATE_KEY }}
         persist-credentials: true


      - name: Setup Node
        uses: actions/setup-node@v2
        with:
          node-version: '20' # or any version you prefer

      - name: Install dependencies
        run: npm install

      - name: Run server
        run: |
          npm run start &
          echo "NODE_PID=$!" >> $GITHUB_ENV
          sleep 6 # give the server some time to start

      - name: Install bun
        run: npm install -g bun
    
      - name: Take screenshot
        run: | 
         sleep 10 
         npm run screenshot
      
      - name: Stop server
        run: kill ${{ env.NODE_PID }} # this will kill the process started by npm start

      - name: Commit and push if it changed
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          git add -A
          git commit -m 'Feat: Screenshot(AutoMated)'
      
      - name: Push changes
        uses: ad-m/github-push-action@master
        with:
          ssh: true
          branch: ${{ github.ref }}

        

            
# Building the website        
  build:
    runs-on: self-hosted
    needs: [screenshot]
    steps:
      - uses: actions/checkout@v3
      # Install Dependenices
      - run: bun install
      # Build Website
      - run: bun run build
      # Add to NGINX
      - run: mv dist/ teaclientmc/
